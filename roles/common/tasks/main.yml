---

- name: Ensure extra CA certificates are present
  copy:
    src: "{{ item }}"
    dest: "/usr/share/pki/ca-trust-source/anchors/{{ item | basename }}"
  with_items: "{{ common_ca_certificates }}"
  when: common_ca_certificates is defined

- name: Ensure system CA trust store is updated
  command: update-ca-trust
  changed_when: false
  when: common_ca_certificates is defined

- name: Ensure Ansible "module-init-tools" requirement is installed
  dnf:
    state: present
    name: module-init-tools
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "module-init-tools" requirement
  when: common_os_hardening | bool
  tags: molecule-idempotence-notest

- name: Ensure OS is hardened
  include_role:
    name: dev-sec.os-hardening
  when: common_os_hardening | bool

- name: Ensure Ansible "python3-policycoreutils" requirement is installed
  dnf:
    state: present
    name: python3-policycoreutils
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "python3-policycoreutils" requirement
  when: common_ssh_hardening | bool
  tags: molecule-idempotence-notest

- name: Ensure Ansible "checkpolicy" requirement is installed
  dnf:
    state: present
    name: checkpolicy
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "checkpolicy" requirement
  when: common_ssh_hardening | bool
  tags: molecule-idempotence-notest

- name: Ensure SSH is hardened
  include_role:
    name: dev-sec.ssh-hardening
  vars:
    ssh_allow_users: "{{ ansible_user }}"
  when: common_ssh_hardening | bool

- name: Ensure SSH public key is authorized
  authorized_key:
    user: "{{ ansible_user }}"
    key: "{{ common_ssh_authorized_key }}"
    state: present
  when: common_ssh_authorized_key is defined

- name: Ensure SSH password authentification is disabled
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication "
    line: "PasswordAuthentication no"
  when: common_ssh_authorized_key is defined

- name: Ensure current user password is set
  user:
    name: "{{ ansible_user }}"
    password: "{{ common_admin_password }}"
  when: common_admin_password is defined

- name: Ensure Chrony is configured to use specified NTP server
  lineinfile:
    path: /etc/chrony.conf
    regexp: "^pool "
    line: "pool {{ common_ntp_server }} iburst"
  when: common_ntp_server is defined

- name: Ensure Chrony is restarted
  systemd:
    name: chronyd
    state: restarted
  when: common_ntp_server is defined
  changed_when: false

- name: Ensure Grub timeout is set to specified value
  lineinfile:
    path: /etc/default/grub
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    create: true
  with_items:
    - line: "GRUB_TIMEOUT={{ common_grub_timeout }}"
      regexp: "^GRUB_TIMEOUT="
    - line: "GRUB_HIDDEN_TIMEOUT={{ common_grub_hidden_timeout }}"
      regexp: "^GRUB_HIDDEN_TIMEOUT="
    - line: "GRUB_HIDDEN_TIMEOUT_QUIET=true"
      regexp: "^GRUB_HIDDEN_TIMEOUT_QUIET="

- name: Ensure Grub auto hide is configured
  command: "grub2-editenv - {{ common_grub_auto_hide |
            ternary('set menu_auto_hide=1', 'unset menu_auto_hide')}}"
  changed_when: false
  tags: molecule-notest  # No /boot on molecule containers

- name: Ensure Grub configuration is applied
  command: "grub2-mkconfig -o {{ item }}"
  changed_when: false
  tags: molecule-notest  # No /boot on molecule containers
  with_items:
    - /boot/efi/EFI/fedora/grub.cfg
    - /boot/grub2/grub.cfg

- name: Ensure DNF is configured
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - option: max_parallel_downloads
      value: 10
    - option: fastestmirror
      value: "true"
    - option: keepcache
      value: "{{ common_dnf_keepcache | string | lower }}"
    - option: install_weak_deps
      value: "{{ common_dnf_install_weak_deps | string | lower }}"

- name: Ensure DNF automatic, DNF system upgrade and Fail2Ban are installed
  dnf:
    state: present
    name:
      - dnf-automatic
      - dnf-plugin-system-upgrade
      - fail2ban-firewalld
    install_weak_deps: false
  retries: 10
  delay: 1

- name: Ensure NFS client requirements are installed
  dnf:
    state: present
    name: nfs-utils
    install_weak_deps: false
  retries: 10
  delay: 1
  when: common_nfs_mount is defined

- name: Ensure NFS target mount directories are present
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  with_items: "{{ common_nfs_mount }}"
  when: common_nfs_mount is defined

- name: Mount NFS shares
  mount:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    opts: "{{ item.opts | default(omit) }}"
    fstype: nfs
    state: "{{ item.state | default('mounted') }}"
  with_items: "{{ common_nfs_mount }}"
  when: common_nfs_mount is defined

- name: Ensure SMB client requirements are installed
  dnf:
    state: present
    name: cifs-utils
    install_weak_deps: false
  retries: 10
  delay: 1
  when: common_smb_mount is defined

- name: Ensure SMB target mount directories are present
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  with_items: "{{ common_smb_mount }}"
  when: common_smb_mount is defined

- name: Mount SMB shares
  mount:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    opts: "{{ item.opts | default(omit) }}"
    fstype: cifs
    state: "{{ item.state | default('mounted') }}"
  with_items: "{{ common_smb_mount }}"
  when: common_smb_mount is defined

- name: Ensure Fail2ban is configured
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.d/jail.local

- name: Ensure Postfix is installed
  dnf:
    state: present
    name: postfix
    install_weak_deps: false
  retries: 10
  delay: 1
  when: common_mail_smtp_host is defined

- name: Ensure Postfix SASL support is installed
  dnf:
    state: present
    name: cyrus-sasl-plain
    install_weak_deps: false
  retries: 10
  delay: 1
  when:
    - common_mail_smtp_host is defined
    - common_mail_smtp_user is defined

- name: Ensure Postfix SASL password file exists
  template:
    src: sasl_passwd.j2
    dest: /etc/postfix/sasl_passwd
    owner: root
    group: root
    mode: '0600'
  when:
    - common_mail_smtp_host is defined
    - common_mail_smtp_user is defined

- name: Ensure Postfix SMTP relay is configured
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: "^#?{{ item.line.split('=')[0] }}="
    line: "{{ item.line }}"
    firstmatch: "{{ item.firstmatch | default(false) }}"
  with_items:
    - line: "myhostname = {{ ansible_fqdn | lower }}"
    - line: "relayhost = {{ _smtp_server }}"
    - line: "inet_interfaces = {{ common_mail_smtp_inet_interfaces }}"
    - line: "smtp_sasl_auth_enable = yes"
      when: common_mail_smtp_user is defined
    - line: "smtp_sasl_security_options = noanonymous, noplaintext"
      when: common_mail_smtp_user is defined
    - line: "smtp_sasl_tls_security_options = noanonymous"
      when: common_mail_smtp_user is defined
    - line: "smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd"
      when: common_mail_smtp_user is defined
    - line: "smtp_use_tls = {{ (common_mail_smtp_tls in ('TLS', 'STARTTLS')) |
             ternary('yes', 'no') }}"
    - line: "smtp_tls_wrappermode = {{ (common_mail_smtp_tls == 'TLS') |
             ternary('yes', 'no') }}"
    - line: "smtp_tls_security_level = {{ (common_mail_smtp_user is defined) |
             ternary('encrypt', 'may') }}"
  when:
    - item.when | default(true)
    - common_mail_smtp_host is defined

- name: Ensure postfix service is started and enabled at boot
  systemd:
    name: postfix
    state: started
    enabled: true
  when: common_mail_smtp_host is defined

- name: Ensure root mails redirection is configured
  lineinfile:
    path: /etc/aliases
    regexp: "^#?root:"
    line: "root:           {{ common_mail_smtp_send_to }}"
  register: _postfix_aliases
  when:
    - common_mail_smtp_host is defined
    - common_mail_smtp_send_to is defined

- name: Ensure Postfix SASL passwords are reloaded
  command: postmap /etc/postfix/sasl_passwd
  when: _postfix_aliases.changed  # noqa 503

- name: Ensure Postfix SASL passwords are secured
  file:
    path: /etc/postfix/sasl_passwd.db
    owner: root
    group: root
    mode: '0600'
  register: _postfix_sasl
  when:
    - common_mail_smtp_host is defined
    - common_mail_smtp_user is defined

- name: Ensure Postfix aliases are reloaded
  command: newaliases
  when: _postfix_aliases.changed  # noqa 503

- name: Ensure postfix service is restarted
  systemd:
    name: postfix
    state: restarted
    enabled: true
  when: _postfix_aliases.changed or _postfix_sasl.changed  # noqa 503

- name: Ensure DNF tracer plugin is installed
  dnf:
    state: present
    name: dnf-plugins-extras-tracer
    install_weak_deps: false
  retries: 10
  delay: 1
  when: common_dnf_automatic_restart | bool

- name: Ensure dnf-automatic-restart is installed
  get_url:
    url: "https://raw.githubusercontent.com/agross/dnf-automatic-restart/master\
          /dnf-automatic-restart"
    dest: /usr/local/sbin/dnf-automatic-restart
    mode: 750
  retries: 10
  delay: 1
  when: common_dnf_automatic_restart | bool

- name: Ensure dnf-automatic-install service directory is present
  file:
    path: /etc/systemd/system/dnf-automatic-install.service.d/
    state: directory
  when: common_dnf_automatic_restart | bool

- name: Ensure dnf-automatic-restart is enabled in dnf-automatic-install
  copy:
    src: dnf-automatic-restart.conf
    dest: "/etc/systemd/system/dnf-automatic-install.service.d/\
           dnf-automatic-restart.conf"
  when: common_dnf_automatic_restart | bool

- name: Ensure DNF automatic update service is started and enabled at boot
  systemd:
    name: dnf-automatic-install.timer
    state: started
    enabled: true

- name: Ensure Firewalld service is started and enabled at boot
  systemd:
    name: firewalld
    state: started
    enabled: true
  tags: molecule-idempotence-notest

- name: Ensure Fail2ban service is started and enabled at boot
  systemd:
    name: fail2ban
    state: started
    enabled: true
  tags: molecule-idempotence-notest

- name: Ensure admin firewalld zone is present
  firewalld:
    zone: admin
    state: present
    permanent: true
  when: common_trusted_firewalld_source is defined

- name: Ensure firewalld is reloaded
  command: firewall-cmd --reload
  changed_when: false
  when: common_trusted_firewalld_source is defined

- name: Ensure admin firewalld zone source is present
  firewalld:
    zone: admin
    source: "{{ common_trusted_firewalld_source }}"
    state: enabled
    permanent: true
    immediate: true
  when: common_trusted_firewalld_source is defined

- name: Ensure admin firewalld zone allow SSH
  firewalld:
    zone: admin
    service: ssh
    state: enabled
    permanent: true
    immediate: true
  when: common_trusted_firewalld_source is defined

- name: Ensure public firewalld zone default services are dropped
  firewalld:
    zone: public
    service: "{{ item }}"
    state: disabled
    permanent: true
    immediate: true
  with_items:
    - ssh
    - dhcpv6-client
    - mdns
  when: common_trusted_firewalld_source is defined
