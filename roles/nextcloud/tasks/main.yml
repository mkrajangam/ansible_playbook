---

# Workaround: https://github.com/ansible/ansible/issues/10374
- name: Get static role path
  set_fact:
    nexcloud_role_path: "{{ role_path }}"

- name: Get Nextcloud config file information
  stat:
    path: /var/www/nextcloud/config/config.php
  register: _config_php

- name: Ensure Nextcloud user is present
  user:
    name: nextcloud

- name: Ensure Nextcloud var directory is present
  file:
    path: /var/lib/nextcloud
    mode: 0755
    setype: var_lib_t
    state: directory

- name: Ensure PostgreSQL is installed
  include_role:
    name: jgoutin.home.postgresql
  vars:
    postgresql_database: nextcloud
    postgresql_user: nextcloud
    postgresql_data: /var/lib/nextcloud/pgsql

- name: Ensure PHP-FPM is installed
  include_role:
    name: jgoutin.home.php_fpm
  vars:
    php_fpm_user: nextcloud
    php_fpm_site: nextcloud
    php_memory_limit: 512M
    # PHP modules details:
    # Natively include: bz2, ctype, curl, dom, exif, fileinfo, ftp, iconv,
    #                   openssl, session, zlib
    # "cli" include: pcntl
    # "process" include: posix
    # "xml" include: libxml, XMLReader, XMLWriter, XMLReader
    # "mysqlnd": MySQL/MariaDB connector
    # "pgsql": PostgreSQL connector
    php_modules: [apcu, cli, gd, gmp, imagick, imap, intl, json, ldap,
                  mbstring, pgsql, redis, zip, process, smbclient, xml]

- name: Ensure Redis is installed
  include_role:
    name: jgoutin.home.redis
  vars:
    redis_user: nextcloud

- name: Ensure Nginx is installed
  include_role:
    name: jgoutin.home.nginx
  vars:
    nginx_server_name: "{{ nextcloud_domain }}"
    nginx_site: nextcloud
    nginx_site_user: nextcloud
    nginx_site_conf: "{{ nexcloud_role_path }}/files/nginx-site-nextcloud"
    nginx_php_fpm: true
    nginx_can_network_connect: true
    nginx_can_use_cifs: "{{ nextcloud_enable_external_storage }}"
    nginx_can_use_fusefs: "{{ nextcloud_enable_external_storage }}"
    nginx_can_sendmail: true
    nginx_can_use_gpg: "{{ nextcloud_enable_mail }}"
    nginx_can_connect_ldap: "{{ nextcloud_enable_ldap }}"
    # Following headers are already in Nexctcloud recommanded configuration
    nginx_security_header_referrer_policy: false
    nginx_security_header_x_content_type_options: false
    nginx_security_header_x_download_options: false
    nginx_security_header_x_frame_options: false
    nginx_security_header_x_permitted_cross_domain_policies: false
    nginx_security_header_x_robots_tag: false
    nginx_security_header_x_xss_protection: false

- name: Ensure ClamAV is installed
  include_role:
    name: jgoutin.home.clamav
  when: nextcloud_enable_antivirus | bool

- name: Ensure RpmFusion-free repository is installed
  include_role:
    name: jgoutin.home.rpmfusion
  vars:
    rpmfusion_free: true  # Required for "ffmpeg"

- name: Ensure other Nextcloud requirements are installed
  dnf:
    state: present
    name:
      # For OCC command auto-completion
      - bash-completion
      # For files preview generation
      - ffmpeg
      - libreoffice
    install_weak_deps: false
  retries: 10
  delay: 1

- name: Ensure temporary directory is present
  tempfile:
    state: directory
    prefix: nextcloud_
  register: _tmp_dir
  when: not _config_php.stat.exists

- name: Ensure Nextcloud server archive is present and match checksum
  get_url:
    url: https://download.nextcloud.com/server/releases/latest.tar.bz2
    dest: "{{ _tmp_dir.path }}/latest.tar.bz2"
    checksum: "sha256:https://download.nextcloud.com/server/releases/\
               latest.tar.bz2.sha256"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud server archive signature is present
  get_url:
    url: https://download.nextcloud.com/server/releases/latest.tar.bz2.asc
    dest: "{{ _tmp_dir.path }}/latest.tar.bz2.asc"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud GPG public key is present
  get_url:
    url: https://nextcloud.com/nextcloud.asc
    dest: "{{ _tmp_dir.path }}/nextcloud.asc"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud GPG public key is imported
  command: "gpg2 --import {{ _tmp_dir.path }}/nextcloud.asc"
  changed_when: false
  when: not _config_php.stat.exists

- name: Ensure Nextcloud server archive signature is valid
  command: "gpg2 --verify {{ _tmp_dir.path }}/latest.tar.bz2.asc
            {{ _tmp_dir.path }}/latest.tar.bz2"
  changed_when: false
  when: not _config_php.stat.exists

- name: Ensure Ansible "tar" requirement is installed
  dnf:
    state: present
    name: tar
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "tar" requirement
  when: not _config_php.stat.exists
  tags: molecule-idempotence-notest

- name: Ensure Ansible "bzip2" requirement is installed
  dnf:
    state: present
    name: bzip2
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "bzip2" requirement
  when: not _config_php.stat.exists
  tags: molecule-idempotence-notest

- name: Ensure Nextcloud server files are present
  unarchive:
    src: "{{ _tmp_dir.path }}/latest.tar.bz2"
    dest: /var/www/
    remote_src: true
    owner: nextcloud
    group: nextcloud
    mode: 0750
  when: not _config_php.stat.exists

- name: Ensure temporary directory is absent
  file:
    path: "{{ _tmp_dir.path }}"
    state: absent
  when: not _config_php.stat.exists and _tmp_dir.path is defined

- name: Ensure Nextcloud data directory is present
  file:
    path: /var/lib/nextcloud/data
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_sys_rw_content_t
    recurse: true
    state: directory
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Nextcloud log directory is present
  file:
    path: /var/log/nextcloud
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_log_t
    recurse: true
    state: directory
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Web server have write permissions on Nextcloud directories
  file:
    path: "/var/www/nextcloud/{{ item.name }}"
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_sys_rw_content_t
    recurse: "{{ item.is_dir | default(true) }}"
  with_items:
    - name: apps
    - name: config
    - name: data
    - name: 3rdparty/aws/aws-sdk-php/src/data/logs
    - name: .htaccess
      is_dir: false
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Nextcloud cron and update services units are present
  copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - nextcloud_cron.service
    - nextcloud_cron.timer
    - nextcloud_update.service
    - nextcloud_update.timer

- name: Ensure Nginx & PHP-FPM services are restarted
  systemd:
    name: "{{ item }}"
    state: restarted
    daemon_reload: true
  changed_when: false
  with_items:
    - php-fpm
    - nginx

- name: Ensure Nextcloud is installed
  command: '/usr/bin/php occ -n maintenance:install
            --database "pgsql"
            --database-host "/var/run/postgresql"
            --database-name "nextcloud"
            --database-user "nextcloud"
            --database-pass ""
            --database-table-prefix ""
            --admin-user "{{ nextcloud_admin_user }}"
            --admin-pass "{{ nextcloud_admin_password }}"
            --data-dir "/var/lib/nextcloud/data"'
  args:
    chdir: /var/www/nextcloud/
    creates: /var/www/nextcloud/config/config.php
  become: true
  become_user: nextcloud

- name: Ensure Nextcloud configuration is set
  command: '/usr/bin/php occ -n config:system:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  when: item.when | default(true)
  with_items:
    - name: trusted_domains 1
      value: "{{ nextcloud_domain }}"
    - name: redis host
      value: /var/run/redis/redis.sock
    - name: redis port
      value: 0
      type: integer
    - name: memcache.local
      value: \OC\Memcache\APCu
    - name: memcache.distributed
      value: \OC\Memcache\Redis
    - name: memcache.locking
      value: \OC\Memcache\Redis
    - name: logfile
      value: /var/log/nextcloud/nextcloud.log
    - name: twofactor_enforced
      value: "{{ nextcloud_twofactor_enforced | string | lower }}"
    - name: token_auth_enforced
      value: "{{ nextcloud_token_auth_enforced }}"
      type: boolean
    - name: mail_from_address
      value: "{{ nextcloud_smtp_from | default(None) }}"
      when: "{{ nextcloud_smtp_from is defined }}"
    - name: mail_domain
      value: "{{ nextcloud_smtp_domain | default(None) }}"
      when: "{{ nextcloud_smtp_domain is defined }}"
    - name: mail_smtpauthtype
      value: "{{ nextcloud_smtp_authtype | default(None) }}"
      when: "{{ nextcloud_smtp_authtype is defined }}"
    - name: mail_smtpauth
      value: true
      type: boolean
      when: "{{ nextcloud_smtp_user is defined }}"
    - name: mail_smtphost
      value: "{{ nextcloud_smtp_host | default(None) }}"
      when: "{{ nextcloud_smtp_host is defined }}"
    - name: mail_smtpport
      value: "{{ nextcloud_smtp_port | default(None) }}"
      type: integer
      when: "{{ nextcloud_smtp_port is defined }}"
    - name: mail_smtpname
      value: "{{ nextcloud_smtp_user | default(None) }}"
      when: "{{ nextcloud_smtp_user is defined }}"
    - name: mail_smtppassword
      value: "{{ nextcloud_smtp_password | default(None) }}"
      when: "{{ nextcloud_smtp_password is defined }}"
    - name: mail_smtpsecure
      value: "{{ nextcloud_smtp_secure | default(None) }}"
      when: "{{ nextcloud_smtp_secure is defined }}"

- name: Ensure Nextcloud applications are enabled
  command: "/usr/bin/php occ -n app:enable {{ item.app }}"
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  when: item.when
  with_items:
    - app: admin_audit
      when: nextcloud_enable_audit | bool
    - app: encryption
      when: nextcloud_enable_encryption | bool
    - app: user_ldap
      when: nextcloud_enable_ldap | bool
    - app: files_external
      when: nextcloud_enable_external_storage | bool

- name: Ensure Nextcloud applications are installed
  command: "/usr/bin/php occ -n app:install {{ item.app }}"
  args:
    chdir: /var/www/nextcloud/
    creates: "/var/www/nextcloud/apps/{{ item.app }}/appinfo/info.xml"
  become: true
  become_user: nextcloud
  retries: 10
  delay: 1
  when: item.when
  with_items:
    - app: files_antivirus
      when: nextcloud_enable_antivirus | bool
    - app: mail
      when: nextcloud_enable_mail | bool

- name: Ensure Nextcloud encryption is enabled
  command: /usr/bin/php occ -n encryption:enable
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  when: nextcloud_enable_encryption | bool

- name: Ensure OCC command Bash autocompletion is set for the nextcloud user
  lineinfile:
    path: /home/nextcloud/.bash_profile
    line: "{{ item }}"
    create: true
  become: true
  become_user: nextcloud
  with_items:
    - eval $(/var/www/nextcloud/occ _completion --generate-hook --program occ)
    - alias occ=/var/www/nextcloud/occ

- name: Ensure user specified Nextcloud applications are installed
  command: "/usr/bin/php occ -n app:install {{ item }}"
  args:
    chdir: /var/www/nextcloud/
    creates: "/var/www/nextcloud/apps/{{ item }}/appinfo/info.xml"
  become: true
  become_user: nextcloud
  ignore_errors: true
  with_items: "{{ nextcloud_applications }}"

- name: Ensure user specified Nextcloud system configuration is set
  command: '/usr/bin/php occ -n config:system:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  ignore_errors: true
  changed_when: false
  with_items: "{{ nextcloud_system_config }}"

- name: Ensure user specified Nextcloud application configuration is set
  command: '/usr/bin/php occ -n config:app:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  ignore_errors: true
  changed_when: false
  with_items: "{{ nextcloud_applications_config }}"

- name: Ensure Nextcloud database is properly optimized
  command: "/usr/bin/php occ -n {{ item }}"
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  with_items:
    - maintenance:mode --on
    - db:add-missing-indices
    - db:convert-filecache-bigint
    - maintenance:mode --off

- name: Ensure Nextcloud services are started and enabled at boot
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - nextcloud_cron.timer
    - nextcloud_update.timer
